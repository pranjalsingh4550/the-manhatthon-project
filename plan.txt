all integers are signed long
all floats are double

list instructions in an enum


ujump (unconditional)
cjump
lw (64b)
sw (64b)

ret/retq (?)


alu ops

andbl, orbl, notbl (boolean)
andbw, orbw, notbw, xorbw shrbw, shlbw (bitwise) (sh: shift)
cmpeq, cmpne, cmplt, cmple, cmpgt, cmpge

addi, subi, muli, divi, floori, modi, expi (integer ops)
addf, subf, mulf, divf, floorf, modf, expf (float ops)

i2float
fl2int



operations act on subtrees: semantic actions of the form do_op (subtree $1, subtree $2, destination $$) { ir.push_back(**);}

will we be optimising things?
x86 has instructions to compare, for example, lower 8 bits of so-and-so register. This is a minimal set of instructions.

The devil's list of bad constructs
*trying to list the parameters of interest of an AST node - will make flags later

- is the next instruction's address known immediately? (refer to the backpatching lecture, or function calls. we may need to store a dummy in the goto label and make another pass to fill it.) >> while, for, if[-elif][-else]
- is the node a direct assignment? ie do we need to define a temporary?
- x86 syntax says "cmpl(ong) %rax, %rbx; jne(qual) 0x7abd;" whereas our syntax will need separate named boolean temporaries, marked and flagged as internal to x86
- are return values direct primitive types or pointers to primitive types? (a = 10; b = a; b = 20; print (a) in python prints 10, not 20 icudk)
- this also means, for statements like result = fncall(..), &result must be passed to fncall! or do we malloc (sizeof (typeof (&fncall)) and overwrite result (which is, for instance, long* not long)
- are we numbering function parameters and limiting the number to 6? (PS if sir doesn't tell us its <= 6, we'll end up making things difficult anyways, so let's ask.)
- maybe there's only one parameter of interest after all, rather than a dozen. i was hoping to have a linux-style bitvector :\
- I've discussed with dev - maybe we don't need the overloading at all. addchild() can be modified to check the opcode and Node.children.size(), and then run the action when the number of children matches the expected number.


## solid considerations:
- for backpatching, the symbol table needs entries to both targets for control flow constructs. but we may go for full-fledged backpatching also. ## NO - we only need to insert loops. GNU as does the rest
- handling args and returns - returns are always in rax, first 6 args in rdi, rsi, rdx, r10, r8, r9 (x86 order). rest in stack.
- let's make the c++ in-memory ir ignore this, ie treat as a vector. print_tac and print_x86_as can deal with this independently.
- FUNCTION TEMPLATE: store = fn (arg1, arg2)
			-> *store = * (c_fn (xx)) [[ translates to ]]
			->	store = alloc_in_caller_stack (sizeof (store); // to avoid mmaps
				void c_fn (store, &arg1, &arg2) { // like in python
					compute return value;
					if (store != NULL)
						*store = return value;
					return ;
				}
- reminder - method calls need a this pointer in the TAC.

- lists and arglists:
	arglists are known at compile-time
	structure of lists, strings at run time is turing-undecidable (inderminate maybe?)
	struct linear_object {
		int size;
		int current_allocated_size; // size of pointer array for lists, length for strings.
		// design choice - null-terminated strings? not needed if we use read/write syscalls, which are easier in assembly. my cs614 group has the code.
		union {
			void* objpointer; // for a list
			char* str_address; // for strings
		}
	}
- constructs like for-break-else have 3 targets (condition, body, else, break_target). the body is reached via fall-through. The in-memory ir (naming it DevenIR) needs these many attributes. I think 3 is the max.
- all other productions seem to be innocuous assignments.



x86 

//

add attribute in fucttion table for max temps used

create/maintain map : {return address, old base ptr, program variables, temps, callee-saved regs, caller saved regs} -> rbp offset

our stack frame:
+----------------------------------------------------+
|arguments - pushed by caller (with above -8 offset) |
+----------------------------------------------------+
|local vars to be initialised by current function    |
+----------------------------------------------------+
|temporaries: rbp offsets designated by compiler     |
+----------------------------------------------------+
|callee-saved registers - save all because we're lazy|
|caller's rbp - pushed by callee                     |
+----------------------------------------------------+
|#ONLY IF this function calls another:               |
|                                                    |
|caller-saved registers                              |
|current return address                              |
+----------------------------------------------------+
We won't store relevant temporaries in between program variables because
(i) consistency with earlier created and dumped symbol table
(ii) this allows space for temporaries to be reused

function call procedure: (look up callq)
	push return address to (rbp+table_size) 
		callq contains a push %eip, -8(%rsp) so this is where we'll use rsp
	push %rbp -> done in conventional programs at the beginning of functions
	abi specifies arguments to be passed in 6 regs + caller stack:
		-> we will NOT follow this. partly for consistency: function arguments
		   are parts of the function stack frame, and have added it to table_size
	# add %rsp, (8 + table_size + %rbp)
	# callq <fnname>
	# where to fill return value?

function return procedure:
	ret(q) contains %rip <- pop (stack). restore rbp before calling

	# pop %rbp; ## confirm that it's rbp + offset zero
	# retq;

	I think return values can be filled in rax because it's always 8B


-- callee
## only rsp is set
spill_caller()
	**
	**
restore_caller()
---

---caller
save_own_regs()
callee()
restore_own()
---

12/04 - change in plan. we're trying to do things in a single pass.
So table size changes: variables_in_scope +----------> variables_in_scope + #declared_temporaries
temporaries and identifiers will be interleaved on the stack. and I think the new stack layout is:

+----------------------------------------------------------+
|return address pushed by x86                             A|
+----------------------------------------------------------+  <--- %rbp
|arguments - pushed by current function's caller          B|  
+----------------------------------------------------------+
|callee-saved registers including rbp: 48B                C|
+----------------------------------------------------------+
|local variables and temporaries in order of declaration  D|
+----------------------------------------------------------+
|caller-saved registers                                   E|
|upon a function call: ignore future vars and temps        |
|caller-saved registers at this offset: 54B or whatever    |
|(current) table_size + 48B                                |
+----------------------------------------------------------+
|return address pushed by x86                             F|
+----------------------------------------------------------+
|child function's arguments                               G|
+----------------------------------------------------------+

Many parts can be implemented almost blindly this way
So the routine is: upon declaration, pushq and upon redef/reuse "mov -%ld(%rbp), %r12".
For calling:
	pushq r8, r9, rest: E
	pushq $0 #use this location later for return address : F
	pushq arg1
	pushq arg2
	..
	addq (#args+1)*8, %rsp
	callq fn_name: writes to F

Upon entry:
	mov %rbp, %rsp
	addq (#args)*8, %rsp # move over G
	pushq rbp, rbx, r12,... # part C
	table_size += 48
	
	# Now resume parsing

For returning:
	movq %rbp, %rsp # before popping parent's rbp off the stack
	popq this, that and the rest
	retq

After child returns:
	popq rest
	mov %rax, -%ld(%rbp) -> return value of child saved in parent's activation record

